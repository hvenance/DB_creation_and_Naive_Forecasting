#Let's gather historical values

from bs4 import BeautifulSoup
import requests
from pprint import pprint
import datetime
import pandas as pd 

#On cherche les données historiques
start_date = datetime.date(2020, 1, 1)

start = start_date.strftime("%Y-%m-%d")

heure_actuelle = datetime.datetime.now().time()

heure_cible = datetime.time(16, 5) #A 16h05, on va dire que les taux sont ceux du jour (car le site de l'ECBB se met à jour vers 16h), avant ce sont les taux de la veille

if heure_actuelle < heure_cible:
    end_date = datetime.date.today() - datetime.timedelta(2)
else:
    end_date = datetime.date.today() - datetime.timedelta(1)

end = end_date.strftime("%Y-%m-%d")

historical_page = requests.get("https://www.frankfurter.app/" + start + '..' + end + '?to=USD,GBP,BRL,SEK,THB').json()

Rate = historical_page['rates'] #On fait ça pour ne prendre que les valeurs associées à la clé 'rates' de notre dictionnaire


#we have a dictionnary but we want a list --> make it happen

list_of_dates = list(Rate.keys())

historical_values_list = []

for date in list_of_dates:
    list_of_name = list(Rate[date].keys())
    for name in list_of_name:
        rate_of_the_day = Rate[date][name]
        historical_values_list.append((date, name, rate_of_the_day))
        
       
       
       
       
       
       
       
       
#We want today's values      

ecb_page = requests.get("https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html")

ecb = BeautifulSoup(ecb_page.content, "html.parser")

table = ecb.find('div', class_="forextable").find('tbody').find_all('tr')

ajd_date = datetime.date.today()

if heure_actuelle < heure_cible:
    ajd_date = datetime.date.today() - datetime.timedelta(1)
else:
    ajd_date = datetime.date.today()

today = ajd_date.strftime("%Y-%m-%d")

data = []

for currency in table:
            Date = today
            Rate = (float(currency.find('span', class_="rate").text)) #On convertit notre rate en un nombre flottant (contre string avant)
            Type = currency.find('td', class_="currency").text
            data.append((Date, Type, Rate))

list_today = []

for money_wanted in data:
    if (money_wanted[1]) == 'USD':
         list_today.append(money_wanted)
    elif (money_wanted[1]) == 'SEK':
        list_today.append(money_wanted)
    elif (money_wanted[1]) == 'BRL':
        list_today.append(money_wanted)
    elif (money_wanted[1]) == 'GBP':
        list_today.append(money_wanted)
    elif (money_wanted[1]) == 'THB':
        list_today.append(money_wanted)
    else:
        ()
        
        
        
        
        
#We create a list with historical and today's values   

final_list = sorted(historical_values_list) + sorted(list_today)
   
in_a_table = pd.DataFrame(sorted(final_list), columns =['Date', 'Money', 'Rate'])

pprint(in_a_table)



#Time to forecast

naive_forecast = []

in_a_table['Naive forecast'] = in_a_table['Rate'].shift(5)

naive_forecast.append(in_a_table['Naive forecast'])

Naive_errors = []

in_a_table['Naive: errors'] = in_a_table['Rate'] - in_a_table['Naive forecast']

Naive_errors.append(in_a_table['Naive: errors'])

def ES(actual_rate, alpha):
    
    size_series = len(actual_rate)
    
    forecast_rate = np.full(size_series, np.NaN)
    
    forecast_rate[5] = actual_rate[0]
    forecast_rate[6] = actual_rate[1]
    forecast_rate[7] = actual_rate[2]
    forecast_rate[8] = actual_rate[3]
    forecast_rate[9] = actual_rate[4]
    
    for idx in range(10, size_series):
        
        forecast_rate[idx] = alpha * actual_rate[idx - 5] + (1 - alpha) * forecast_rate[idx - 5]
    return forecast_rate


ES_forecast=[]

in_a_table['ES forecast'] = ES(actual_rate=in_a_table['Rate'], alpha=0.5)

ES_forecast.append(in_a_table['ES forecast'])

ES_errors = []

in_a_table['ES: errors'] = in_a_table['Rate'] - in_a_table['ES forecast']

ES_errors.append(in_a_table['ES: errors'])

in_a_table
     
