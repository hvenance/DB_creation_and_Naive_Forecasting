!pip install bs4
from bs4 import BeautifulSoup
import requests

ecb_page = requests.get("https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html")
ecb = BeautifulSoup(ecb_page.text, "html.parser")

from pprint import pprint

currencies = ecb.find_all(class_=["currency", "rate"]) #class currency et rate 
pprint(currencies) 

rates et currencies sont dans deux class diff donc il faut trouver un moyen de les rejoindre 

#LucienWebScraping

from bs4 import BeautifulSoup
import requests

ecb_page = requests.get("https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html")

ecb = BeautifulSoup(ecb_page.content, "html.parser")

from pprint import pprint

table = ecb.find('div', class_="forextable").find('tbody').find_all('tr')

data = []
for currency in table:
    Type = currency.find('td', class_="currency").text
    Name = currency.find('td', class_="alignLeft").text
    Rate = currency.find('span', class_="rate").text
    test.append([Type, Name, Rate])
    
pprint (data)

#REGARDE ICI 

dico = {}

for currency in table:
    Type = currency.find('td', class_="currency").text
    Name = currency.find('td', class_="alignLeft").text
    Rate = currency.find('span', class_="rate").text
    dico[currency.find('td', class_="currency").text]=currency.find('span', class_="rate").text

dico_today={}
dico_today['today']=dico
pprint(dico_today)

#si on met en dico on peut faire comme ça pour avoir en tableau:
!pip install pandas
import pandas as pd

df=pd.DataFrame(dico_today)
pprint(df)

#mtn que luludangy a trouvé les data, il faut faire quoi concretement, juste le forecast puis comparer le forecast au live quote? 

!pip install pandas
import pandas as pd
import sqlite3

from datetime import datetime

!pip install requests
import requests

import json

start="2020-01-01"
end="2020-12-08"

start_obj = datetime.strptime(start,'%Y-%m-%d')
end_obj = datetime.strptime(end,'%Y-%m-%d')

start_str = datetime.strftime(start_obj,'%Y-%m-%d %H:%M:%S')
end_str = datetime.strftime(end_obj,'%Y-%m-%d %H:%M:%S')

result=requests.get('https://api.frankfurter.app/'+start+'..'+end+'?to=USD,GBP,BRL,SEK,THB')
result.status_code
result.text


#Once again, it's time to shine for lulu

from bs4 import BeautifulSoup
import requests
from pprint import pprint
import datetime

start_date = datetime.date(2020, 1, 1)

start = start_date.strftime("%Y-%m-%d")

end_date = datetime.date.today()

end = end_date.strftime("%Y-%m-%d")

historical_page = requests.get("https://www.frankfurter.app/" + start + '..' + end + '?to=USD,GBP,BRL,SEK,THB').json()

pprint(historical_page)



#Version ldangy à 1h22 du matin le 9/12

1. pour retrouver les datas du jour (il y a encore un problème avec ça pour définir clairement le 'jour')

from bs4 import BeautifulSoup
import requests
import datetime
from pprint import pprint

ecb_page = requests.get("https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html")

ecb = BeautifulSoup(ecb_page.content, "html.parser")

table = ecb.find('div', class_="forextable").find('tbody').find_all('tr')

ajd_date = datetime.date.today()

heure_actuelle = datetime.datetime.now().time()

heure_cible = datetime.time(16, 2) #A 16h02, on va dire que les taux sont ceux du jour (car le site de l'ECBB se met à jour à 16h), avant ce sont les taux de la veille

if heure_actuelle < heure_cible:
    ajd_date = datetime.date.today() - datetime.timedelta(1)
else:
    ajd_date = datetime.date.today()

today = ajd_date.strftime("%Y-%m-%d")

data = []

for currency in table:
            Date = today
            Rate = (float(currency.find('span', class_="rate").text)) #On convertit notre rate en un nombre flottant (contre string avant)
            Type = currency.find('td', class_="currency").text
            data.append((Date, Type, Rate))
    
pprint (data)

#ICI  mais ça devient long avec (hip)pop 
d2=[]
d2.append(data.pop(0))
d2.append(data.pop(5-1)) #il faut faire -1 pcq on retire un "élement avant (USD)
d2.append(data.pop(9-2))
d2.append(data.pop(17-3))
d2.append(data.pop(30-4))

import pandas as pd 
df = pd.DataFrame(sorted(d2), columns =['Name', 'Age', 'Score']) 
pprint(df)

2. Pour retrouver les datas depuis le début de l'année

from bs4 import BeautifulSoup
import requests
from pprint import pprint
import datetime

start_date = datetime.date(2020, 1, 1)

start = start_date.strftime("%Y-%m-%d")

end_date = datetime.date.today() - datetime.timedelta(1)

end = end_date.strftime("%Y-%m-%d")

historical_page = requests.get("https://www.frankfurter.app/" + start + '..' + end + '?to=USD,GBP,BRL,SEK,THB').json()

Rate = historical_page['rates']

#we have a dictionnary but we want a list --> make it happen

list_of_dates = list(Rate.keys())

the_list = []

for date in list_of_dates:
    list_of_name = list(Rate[date].keys())
    for name in list_of_name:
        rate_of_the_day = Rate[date][name]
        the_list.append((date, name, rate_of_the_day))
        
pprint (the_list)

#FIN (Pour le moment)

#nouchine: pr le mettre en tableau 
import pandas as pd 
df2 = pd.DataFrame(the_list, columns =['Name', 'Age', 'Score']) ms ceserait peut-être mieux un tableau où les currencies n(apparaissent qu'une fois
pprint(df2)
