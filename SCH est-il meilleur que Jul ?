import sqlite3

connection = sqlite3.connect('rates_gathering.db') #We create, name and create a connection to the DataBase


#1. Historical values


#Here, we will retrieve historical rates via an API call until the last working day before today. The rate of today will be retrieved via a webscrapping of the ECB webpage 

from bs4 import BeautifulSoup
import requests
from 
import pprint
import datetime
import pandas as pd 
import numpy as np
import schedule

start_date = datetime.date(2020, 1, 1)

ajd_date = datetime.date.today() #we retrieve the date of today

start = start_date.strftime("%Y-%m-%d") #The start_date is converted in a string

today = ajd_date.strftime("%Y-%m-%d") #The ajd_date is converted in a string

work = ajd_date.isoweekday() #This aims to return an integer value corresponding to the day of the week (where Monday = 1 and Sunday = 7)

heure_actuelle = datetime.datetime.now().time() #We retrieve the precise time of the moment the code is run

heure_cible = datetime.time(16, 5) #At 16h05, we say that the rates are the one of the day (since ECB website is updated around 16h)


if work == 1: #If we are Monday
    if heure_actuelle < heure_cible: #before 16h05, 
        end = ajd_date - datetime.timedelta(4) #We say that the end is the date of today minus 4 days (so the end is Thursday)
    else:
        end = ajd_date - datetime.timedelta(3) #We say that the end is the date of today minus 3 days (so the end is Friday)

elif work == 2: #If we are Tuesday
    if heure_actuelle < heure_cible:
        end = ajd_date - datetime.timedelta(4) #We say that the end is the date of today minus 3 days (so the end is Friday)
    else:
        end = ajd_date - datetime.timedelta(1) #We say that the end is the date of today minus 1 day (so the end is Monday)
        
elif work == 6:
    end = ajd_date - datetime.timedelta(2)

elif work == 7:
    end = ajd_date -  datetime.timedelta(3)

else:
    if heure_actuelle < heure_cible:
        end = ajd_date - datetime.timedelta(2)
    else:
        end = ajd_date - datetime.timedelta(1)


end = end.strftime("%Y-%m-%d") #The ajd (which is a date) is converted in a string


historical_page = requests.get("https://www.frankfurter.app/" + start + '..' + end + '?to=USD,GBP,BRL,SEK,THB').json()
#we call the API from the start until the end (they are dates that have been converted in strings) and for specific money. This returns us a dictionnary with several
#keys. One of these keys is 'rate' and it contains another dictionnary. In this dictionnary, there is another dictionnary where the key is the date and the values
#are the rate of the day for the different money

Rate = historical_page['rates'] #We do this to only get values associates to the key 'rate' of our dictionnary



list_of_dates = list(Rate.keys()) #We do this to only get the keys (which are dates) of our 'rate' dictionnary

historical_values_list = []

for date in list_of_dates:  #we have a dictionnary but we want a list --> make it happen
    list_of_name = list(Rate[date].keys()) #we create a list with all the keys froms the Rate[date] dictionnary
    for name in list_of_name:
        rate_of_the_day = Rate[date][name]
        historical_values_list.append((date, name, rate_of_the_day))
        
        



#2. We want today's values


if heure_actuelle < heure_cible: #Since the ECB website is updated at 16h, before 16h we have the rate from the last working day
    ajd_date = datetime.date.today() - datetime.timedelta(1)
else:
    ajd_date = datetime.date.today()


#we want to delete weekend days because the stock exchange is closed during the weekend

day = datetime.datetime.strptime(today, '%Y-%m-%d') #NB. today is defined in the '1. Historical values' point
work = day.isoweekday()
if work == 6:
    d = day -  datetime.timedelta(1)
    d = d.strftime("%Y-%m-%d")
elif work == 7:
    d = day - datetime.timedelta(2)
    d = d.strftime("%Y-%m-%d")
else: 
    d = day.strftime("%Y-%m-%d")

ecb_page = requests.get("https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html")

ecb = BeautifulSoup(ecb_page.content, "html.parser")

table = ecb.find('div', class_="forextable").find('tbody').find_all('tr') #after inspecting the ECB website, we ask the 'div' tag which has "forextable" as class.
#In this div tag, we find tbody and in 'tbody' we find all 'tr' tag. The rate are in these 'tr' tags 

data = []

for currency in table: #Here, we will gather all the moneys and put them in a list of tuples with the date, the name (=type) and the rate
            Date = d
            Rate = (float(currency.find('span', class_="rate").text)) #We convert the rate retrieved via the webscrapping in a float (vs string before)
            Type = currency.find('td', class_="currency").text
            data.append((Date, Type, Rate))
            

list_today = []

for money_wanted in data:  #We filter our list_today with all moneys to keep only the ones we are interested in
    if (money_wanted[1]) == 'USD':
         list_today.append(money_wanted)
    elif (money_wanted[1]) == 'SEK':
        list_today.append(money_wanted)
    elif (money_wanted[1]) == 'BRL':
        list_today.append(money_wanted)
    elif (money_wanted[1]) == 'GBP':
        list_today.append(money_wanted)
    elif (money_wanted[1]) == 'THB':
        list_today.append(money_wanted)
    else:
        ()
        
        
#3. Let's gather everything

#We will create a list per money with historical values and today's values

USD =[]
GBP = []
SEK =[]
THB = []
BRL =[]

final_list = sorted(historical_values_list)+sorted(list_today)

for t in final_list:        
    if str(t[1]) == 'USD':
            USD.append(t)
    elif str(t[1]) == 'GBP':
            GBP.append(t)
    elif str(t[1]) == 'SEK':
            SEK.append(t)
    elif str(t[1]) == 'THB':
            THB.append(t)
    elif str(t[1]) == 'BRL':
            BRL.append(t)

USD_after = pd.DataFrame(sorted(USD), columns =['Date', 'Money', 'Rate']) #We transform the lists in dataframes
GBP_after = pd.DataFrame(sorted(GBP), columns =['Date', 'Money', 'Rate'])
SEK_after = pd.DataFrame(sorted(SEK), columns =['Date', 'Money', 'Rate'])
THB_after = pd.DataFrame(sorted(THB), columns =['Date', 'Money', 'Rate'])
BRL_after = pd.DataFrame(sorted(BRL), columns =['Date', 'Money', 'Rate'])



#4. Time to forecast

def naive_forecast(data_frame):  #We define the 'naÃ¯ve forecas't function
    data_frame['Naive forecast'] = data_frame['Rate'].shift(1)
    data_frame['Naive: error'] = data_frame['Rate'] - data_frame['Naive forecast']
    data_frame['Absolute error'] = data_frame['Naive: error'].abs()
    data_frame['MAE'] = data_frame['Absolute error'].sum()/len(data_frame['Absolute error']-1)
    data_frame ['MAE'].iloc[0:-1] = np.nan

    return data_frame

USD = naive_forecast(USD_after) #we apply the function to our dataframes
GBP = naive_forecast(GBP_after)
SEK = naive_forecast(SEK_after)
THB = naive_forecast(THB_after)
BRL = naive_forecast(BRL_after)


#5. The database


if heure_actuelle < heure_cible: #NB. 'heure_actuelle' and 'heure_cible' have been defined in '1. Historical values'
    ajd = datetime.date.today()
else:
    ajd = datetime.date.today() + datetime.timedelta(1)

def test():
    what_day =[]
    for a in time.localtime():
    #time.localtime() method is a time structure that returns the year, the month, etc. The 7 element ([6] in python) of this structure is the weekday (where 0 = Monday and 6 = Sunday) 
        what_day.append(a)

    if what_day[6] < 4: #If we are between Monday and Wednesday included
        if heure_actuelle < heure_cible:
            ajd = datetime.date.today()

        else:
            ajd = datetime.date.today() + datetime.timedelta(1)

        USD = USD_after.append(pd.Series([ajd, 'USD', USD_after['Rate'].iloc[-1],USD_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        GBP = GBP_after.append(pd.Series([ajd, 'GBP', GBP_after['Rate'].iloc[-1],GBP_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        SEK = SEK_after.append(pd.Series([ajd, 'SEK', SEK_after['Rate'].iloc[-1],SEK_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        THB = THB_after.append(pd.Series([ajd, 'THB', THB_after['Rate'].iloc[-1],THB_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        BRL = BRL_after.append(pd.Series([ajd, 'BRL', BRL_after['Rate'].iloc[-1],BRL_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        #Here, we add a line in our dataframe with the forecast for the next working day


    elif what_day[6] == 4: #If we are Friday
        if heure_actuelle < heure_cible:
            ajd = datetime.date.today()
        else:
            ajd = datetime.date.today() + datetime.timedelta(3)
    
        USD = USD_after.append(pd.Series([ajd, 'USD', USD_after['Rate'].iloc[-1],USD_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        GBP = GBP_after.append(pd.Series([ajd, 'GBP', GBP_after['Rate'].iloc[-1],GBP_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        SEK = SEK_after.append(pd.Series([ajd, 'SEK', SEK_after['Rate'].iloc[-1],SEK_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        THB = THB_after.append(pd.Series([ajd, 'THB', THB_after['Rate'].iloc[-1],THB_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        BRL = BRL_after.append(pd.Series([ajd, 'BRL', BRL_after['Rate'].iloc[-1],BRL_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        #Here, we add a line in our dataframe with the forecast for the next working day (which is Monday if we are after 16h05)
    
    elif what_day[6] == 5: #If we are Saturday
        ajd = datetime.date.today() + datetime.timedelta(2)

        USD = USD_after.append(pd.Series([ajd, 'USD', USD_after['Rate'].iloc[-1],USD_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        GBP = GBP_after.append(pd.Series([ajd, 'GBP', GBP_after['Rate'].iloc[-1],GBP_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        SEK = SEK_after.append(pd.Series([ajd, 'SEK', SEK_after['Rate'].iloc[-1],SEK_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        THB = THB_after.append(pd.Series([ajd, 'THB', THB_after['Rate'].iloc[-1],THB_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        BRL = BRL_after.append(pd.Series([ajd, 'BRL', BRL_after['Rate'].iloc[-1],BRL_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        #Here, we add a line in our dataframe with the forecast for the next working day (which is Monday)
    
    elif what_day[6] == 6: #If we are Sunday
        ajd = datetime.date.today() + datetime.timedelta(1)

        USD = USD_after.append(pd.Series([ajd, 'USD', USD_after['Rate'].iloc[-1],USD_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        GBP = GBP_after.append(pd.Series([ajd, 'GBP', GBP_after['Rate'].iloc[-1],GBP_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        SEK = SEK_after.append(pd.Series([ajd, 'SEK', SEK_after['Rate'].iloc[-1],SEK_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        THB = THB_after.append(pd.Series([ajd, 'THB', THB_after['Rate'].iloc[-1],THB_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        BRL = BRL_after.append(pd.Series([ajd, 'BRL', BRL_after['Rate'].iloc[-1],BRL_after['MAE'].iloc[-1]],index=['Date', 'Money', 'Naive forecast', 'MAE']),ignore_index=True)
        #Here, we add a line in our dataframe with the forecast for the next working day (which is Monday)
    
    gathered = [USD, GBP, SEK, THB, BRL] #We gather all our dataframe in one big list

    USD.to_sql('USD', connection, if_exists = 'replace')  #We add our DataFrame in our Database
    GBP.to_sql('GBP', connection, if_exists = 'replace')
    SEK.to_sql('SEK', connection, if_exists = 'replace')
    THB.to_sql('THB', connection, if_exists = 'replace')
    BRL.to_sql('BRL', connection, if_exists = 'replace')
        
    connection.commit()

    what_day.clear() #We clear our list with the day (so when we repeat the action tomorrow the list will be empty)
    print("Next working day forecast:")
    for a in gathered:
        pprint(a.iloc[[-1], [0,1,3,6]]) #We print the next day forecast in the DB
        
        
 #6. Let's repeat it

#IF YOU ARE RUNNING IT FOR THE FIRST TIME AND THAT YOU DO NOT SCHEDULE, YOU NEED TO INSTALL IT 
!pip install schedule #When you have done it once and that schedule is installed, you can remove this line

import time 
 
schedule.every().day.at("16:06").do(test)  #We schedule our function ('test') to be run every day at 16h06 

while True:
    schedule.run_pending()
    time.sleep(1)
