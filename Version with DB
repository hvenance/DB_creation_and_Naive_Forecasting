#1. Let's gather historical values

from bs4 import BeautifulSoup
import requests
from pprint import pprint
import datetime
import pandas as pd 
import numpy as np

#On cherche les données historiques
start_date = datetime.date(2020, 1, 1)

start = start_date.strftime("%Y-%m-%d")

heure_actuelle = datetime.datetime.now().time()

heure_cible = datetime.time(16, 5) #A 16h05, on va dire que les taux sont ceux du jour (car le site de l'ECB se met à jour vers 16h), avant ce sont les taux de la veille

if heure_actuelle < heure_cible:
    end_date = datetime.date.today() - datetime.timedelta(2)
else:
    end_date = datetime.date.today() - datetime.timedelta(1)

end = end_date.strftime("%Y-%m-%d")

historical_page = requests.get("https://www.frankfurter.app/" + start + '..' + end + '?to=USD,GBP,BRL,SEK,THB').json()

Rate = historical_page['rates'] #On fait ça pour ne prendre que les valeurs associées à la clé 'rates' de notre dictionnaire


#we have a dictionnary but we want a list --> make it happen

list_of_dates = list(Rate.keys())

historical_values_list = []

for date in list_of_dates:
    list_of_name = list(Rate[date].keys())
    for name in list_of_name:
        rate_of_the_day = Rate[date][name]
        historical_values_list.append((date, name, rate_of_the_day))
        
        
        
#2. We want today's values

ecb_page = requests.get("https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html")

ecb = BeautifulSoup(ecb_page.content, "html.parser")

table = ecb.find('div', class_="forextable").find('tbody').find_all('tr')

ajd_date = datetime.date.today()

if heure_actuelle < heure_cible:
    ajd_date = datetime.date.today() - datetime.timedelta(1)
else:
    ajd_date = datetime.date.today()

today = ajd_date.strftime("%Y-%m-%d")

data = []

for currency in table:
            Date = today
            Rate = (float(currency.find('span', class_="rate").text)) #On convertit notre rate en un nombre flottant (contre string avant)
            Type = currency.find('td', class_="currency").text
            data.append((Date, Type, Rate))

list_today = []

for money_wanted in data:
    if (money_wanted[1]) == 'USD':
         list_today.append(money_wanted)
    elif (money_wanted[1]) == 'SEK':
        list_today.append(money_wanted)
    elif (money_wanted[1]) == 'BRL':
        list_today.append(money_wanted)
    elif (money_wanted[1]) == 'GBP':
        list_today.append(money_wanted)
    elif (money_wanted[1]) == 'THB':
        list_today.append(money_wanted)
    else:
        ()
        
        
        
        
        
#3. Gather everything

USD =[]
GBP = []
SEK =[]
THB = []
BRL =[]

final_list = sorted(historical_values_list) + sorted(list_today)

for t in final_list:            #On fait ça pour avoir les valeurs séparées pour chaque monnaie --> pratique pour la DB
    if str(t[1]) == 'USD':
            USD.append(t)
    elif str(t[1]) == 'GBP':
            GBP.append(t)
    elif str(t[1]) == 'SEK':
            SEK.append(t)
    elif str(t[1]) == 'THB':
            THB.append(t)
    elif str(t[1]) == 'BRL':
            BRL.append(t)

USD_after = pd.DataFrame(sorted(USD), columns =['Date', 'Money', 'Rate'])    #Une DataFrame par monnaie --> plus simple à manipuler
GBP_after = pd.DataFrame(sorted(GBP), columns =['Date', 'Money', 'Rate'])
SEK_after = pd.DataFrame(sorted(SEK), columns =['Date', 'Money', 'Rate'])
THB_after = pd.DataFrame(sorted(THB), columns =['Date', 'Money', 'Rate'])
BRL_after = pd.DataFrame(sorted(BRL), columns =['Date', 'Money', 'Rate'])

gathered = [USD_after, GBP_after, SEK_after, THB_after, BRL_after] #on rassemble chaque DataFrame dans une grande liste

in_a_table = pd.concat(gathered).sort_values(by=['Date', 'Money']) #On concat nos dataframe et on les trie par date et puis par nom de monnaie




#4. Time to forecast

def naive_forecast(data_frame):  #On définit la fonction naïve forecast qu'on va pouvoir appliquer à chaque DataFrame
    data_frame['Naive forecast'] = data_frame['Rate'].shift(1)
    data_frame['Naive: errors'] = data_frame['Rate'] - data_frame['Naive forecast']
    return data_frame

USD_after = naive_forecast(USD_after) #On applique la fonction à nos DataFrame
GBP_after = naive_forecast(GBP_after)
SEK_after = naive_forecast(SEK_after)
THB_after = naive_forecast(THB_after)
BRL_after = naive_forecast(BRL_after)

gathered = [USD_after, GBP_after, SEK_after, THB_after, BRL_after] #On redefinit gathered avec nos nouvelles dataframe (qui contiennent le naive forecast)

in_a_table = pd.concat(gathered).sort_values(by=['Date', 'Money']) #pareil que pour avant

in_a_table

def ES(d, alpha):    #exponential smoothing
    size_series = len(d)   
    forecast_rate = np.full(size_series, np.NaN)   
    forecast_rate[1] = d[0]     
    for idx in range(2, size_series):     
        forecast_rate[idx] = alpha * d[idx - 1] + (1 - alpha) * forecast_rate[idx - 1]
    return forecast_rate
    
USD_after['ES'] = ES(d=USD_after['Rate'], alpha=0.5)
GBP_after['ES'] = ES(d=GBP_after['Rate'], alpha=0.5)
SEK_after['ES'] = ES(d=SEK_after['Rate'], alpha=0.5)
THB_after['ES'] = ES(d=THB_after['Rate'], alpha=0.5)
BRL_after['ES'] = ES(d=BRL_after['Rate'], alpha=0.5)

USD_after['ES: error'] = USD_after['Rate']-USD_after['ES']
GBP_after['ES: error'] = GBP_after['Rate']-GBP_after['ES']
SEK_after['ES: error'] = SEK_after['Rate']-SEK_after['ES']
THB_after['ES: error'] = THB_after['Rate']-THB_after['ES']
BRL_after['ES: error'] = BRL_after['Rate']-BRL_after['ES']

gathered = [USD_after, GBP_after, SEK_after, THB_after, BRL_after] #On redefinit gathered avec nos nouvelles dataframe (qui contiennent le naive forecast)

in_a_table = pd.concat(gathered).sort_values(by=['Date', 'Money']) #pareil que pour avant

in_a_table
#On peut essayer de definir une fonction pour notre ES et MA (pas obligatoire mous nouchnouchine t'as l'air de maitriser l'ES)



#5. The database part

import sqlite3

#define connection and cursor. Connection is used to connect to the DB and it represents the DB

connection = sqlite3.connect('rates_gathering.db') #On nomme la DB

#From this connection --> create a cursor to interact with the DB

cursor = connection.cursor()

commande_del = """DROP TABLE 'GBP'"""  #Ces commandes servent à supprimer l'ancienne table de notre DB quand on re-run notre code
cursor.execute(commande_del)           #(ces tables supprimées seront remplacées ensuite (cf. plus bas)). QUAND ON RUN LE CODE POUR 
commande_del = """DROP TABLE 'USD'"""  #LA PREMIERE FOIS --> IL FAUT METTRE UN '#' DEVANT CHACUNE DE SES LIGNES (car premier run du code)
cursor.execute(commande_del)           #veut dire qu'il n'y a pas encore de ligne dans la DB (vu qu'elle vient d'être crée) et donc
commande_del = """DROP TABLE 'SEK'"""  #pas de ligne à supprimer
cursor.execute(commande_del)
commande_del = """DROP TABLE 'THB'"""
cursor.execute(commande_del)
commande_del = """DROP TABLE 'BRL'"""
cursor.execute(commande_del)

USD_after.to_sql('USD', connection)  #On ajoute nos dataframe (qu'on a crée avant) à notre base de données
GBP_after.to_sql('GBP', connection)
SEK_after.to_sql('SEK', connection)
THB_after.to_sql('THB', connection)
BRL_after.to_sql('BRL', connection)

connection.commit() #sert à enregistrer le tout (la DB), à commit l'ensemble


#Pour visualiser la DB (ça aide), on peut la voir en la mettant sur ce site par exemple: https://inloop.github.io/sqlite-viewer/
#(par défaut la DB sera enregistrée dans le même dossier que celui dans lequel se trouve ce notebook)

#Si vous avez un UserWarning, osef c'est juste un warning par rapport à la version de python qu'on utilise
